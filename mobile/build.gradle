apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'


android {
    compileSdk 34
    ndkVersion "25.2.9519653"

    lint {
        baseline = file("lint-baseline.xml") // 添加这一行
    }
    defaultConfig {
        applicationId "net.activitywatch.android"
        minSdkVersion 24
        targetSdkVersion 34

        // Set in CI on tagged commit
        // FIXME: should be set before tagging, so that F-droid picks it up correctly
        //        https://gitlab.com/fdroid/fdroiddata/-/merge_requests/11786?commit_id=d2cedcbe3d26db59378d582a8cf952af16b6407f#note_1966750559
        versionName "0.12.1"

        // Set in CI by `bundle exec fastlane update_version`
        versionCode 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // NOTE: This only works for API level 28 and above
        //testInstrumentationRunnerArguments useTestStorageService: 'true'

        // WARNING: Never commit this uncommented! (leads to huge APKs)
        //packagingOptions {
        //    doNotStrip '**/*.so'
        //}
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a" // 按需选择架构
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE'
            }
            // firebaseCrashlytics {
            //     nativeSymbolUploadEnabled true
            // }
        }
        debug {
            applicationIdSuffix ".debug"
            jniDebuggable true
            renderscriptDebuggable true
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
    namespace 'net.activitywatch.android'
    // Never got this to work...
    //if (project.hasProperty("doNotStrip")) {
    //    packagingOptions {
    //        doNotStrip '**/*.so'
    //    }
    //}

    // Creates a resource versionName with the full version
    // https://stackoverflow.com/a/36468650/965332
    applicationVariants.all { variant ->
        variant.resValue "string", "versionName", 'v' + variant.versionName
    }

    buildFeatures {
        viewBinding true
    }
}

// ======================
// 🚨 新增：SO 文件强制检查 - Modified definition
// ======================
// 定义必检的 SO 文件（架构+路径）
// 注意：这个定义放在了 android { ... } 块外面，这是有效的 Gradle 语法
def mandatorySoFiles = [
    "arm64-v8a/libaw_server.so",  // 主流 64 位设备（必选）
    "armeabi-v7a/libaw_server.so" // 兼容 32 位设备（可选，可删除）
]
task checkRequiredSoFiles { // Removed (type: Check), defaults to DefaultTask
    description = "🔍 检查必需的 SO 文件是否存在"
    group = "Verification"

    doLast { // Added doLast block - 将检查逻辑放在 doLast 块中
        mandatorySoFiles.each { soPath -> // 这个 mandatorySoFiles 变量在这里可以访问到
            def soFile = file("src/main/jniLibs/$soPath")
            if (!soFile.exists()) {
                throw new GradleException(
                    "\n❌ 构建失败：缺失必需的 SO 文件\n" +
                    "文件路径：$soFile.absolutePath\n" +
                    "修复建议：\n" +
                    "1. 确保 Rust 模块（aw-server-rust）已正确编译\n" +
                    "2. 手动将 SO 文件复制到 jniLibs 对应架构目录\n" +
                    "3. 运行命令：./gradlew cargoBuild（如使用 Rust 插件）"
                )
            }
        }
    }
}
// ======================

// ======================
// 将检查绑定到所有构建类型（debug/release）
// ======================
/*
tasks.withType(com.android.build.gradle.tasks.PreBuildTask).all { // <--- Original line 108
    dependsOn checkRequiredSoFiles
}
*/
// ======================
preBuild.dependsOn checkRequiredSoFiles

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.annotation:annotation:1.5.0'

    implementation 'com.google.android.material:material:1.7.0'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.4.3'
    implementation(platform("com.google.firebase:firebase-bom:32.3.1")) 
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.google.firebase:firebase-crashlytics")
    implementation 'com.google.firebase:firebase-crashlytics-ndk:18.4.2'

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit-ktx:$extJUnitVersion"
    androidTestImplementation "androidx.test:runner:$androidXTestVersion"
    androidTestImplementation "androidx.test:rules:$androidXTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestUtil "androidx.test.services:test-services:$servicesVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
}

// Can be used to build with: ./gradlew cargoBuild
// NOTE: Doesn't work, chokes on building openssl-sys
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

cargo {
    module  = "../aw-server-rust"       // Or whatever directory contains your Cargo.toml
    libname = "aw_server"          // Or whatever matches Cargo.toml's [package] name.
    targets = ["arm", "arm64", "x86", "x86_64"]  // See bellow for a longer list of options
    profile = 'release'  // Selects the Cargo release profile (defaults to 'debug')
}

tasks.whenTaskAdded { task ->
    // TODO: Build aw-server lib here instead of in Makefile?
    // Doesn't work, chokes on building openssl-sys
    //if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
    //    task.dependsOn 'cargoBuild'
    //}

    // TODO: Build aw-webui here?
    //if (task.name.contains("assembleRelease")) {
    //    task.getDependsOn().add({
    //        // add your logic here
    //    })
    //}
}

apply plugin: "com.google.gms.google-services" // 必须存在，且在最后一行
apply plugin: "com.google.firebase.crashlytics" // <--- **新增这一行**